<?php
/**
 * Generated by Haxe 4.1.1
 */

namespace shoppingcart;

use \php\Boot;
use \maglev\MagLev;
use \haxe\ds\StringMap;

class ItemRepository {
	/**
	 * @var MagLev
	 */
	public $bus;
	/**
	 * @var StringMap
	 */
	public $items;

	/**
	 * @param MagLev $bus
	 * 
	 * @return void
	 */
	public function __construct ($bus) {
		#/src/shoppingcart/ItemRepository.hx:12: characters 9-23
		$this->bus = $bus;
		#/src/shoppingcart/ItemRepository.hx:13: characters 9-56
		$this->items = new StringMap();
	}

	/**
	 * @param ItemModel $item
	 * @param \Closure $callback
	 * 
	 * @return void
	 */
	public function Add ($item, $callback) {
		#/src/shoppingcart/ItemRepository.hx:17: lines 17-19
		if (!array_key_exists($item->cartId, $this->items->data)) {
			#/src/shoppingcart/ItemRepository.hx:18: characters 13-56
			$this1 = $this->items;
			$k = $item->cartId;
			$v = new \Array_hx();
			$this1->data[$k] = $v;
		}
		#/src/shoppingcart/ItemRepository.hx:20: characters 9-54
		$idx = ($this->items->data[$item->cartId] ?? null)->length;
		#/src/shoppingcart/ItemRepository.hx:21: characters 9-23
		$item->idx = $idx;
		#/src/shoppingcart/ItemRepository.hx:22: characters 9-38
		$_this = ($this->items->data[$item->cartId] ?? null);
		$_this->arr[$_this->length++] = $item;
		#/src/shoppingcart/ItemRepository.hx:23: characters 9-22
		$callback($idx);
	}

	/**
	 * @param ItemModel $item
	 * @param \Closure $callback
	 * 
	 * @return void
	 */
	public function Edit ($item, $callback) {
		#/src/shoppingcart/ItemRepository.hx:45: characters 9-49
		($this->items->data[$item->cartId] ?? null)->offsetSet($item->idx, $item);
		#/src/shoppingcart/ItemRepository.hx:46: characters 9-19
		$callback();
	}

	/**
	 * @param string $cartId
	 * @param \Closure $callback
	 * 
	 * @return void
	 */
	public function FindByCartId ($cartId, $callback) {
		#/src/shoppingcart/ItemRepository.hx:55: lines 55-59
		if (array_key_exists($cartId, $this->items->data)) {
			#/src/shoppingcart/ItemRepository.hx:56: characters 13-36
			$callback(($this->items->data[$cartId] ?? null));
		} else {
			#/src/shoppingcart/ItemRepository.hx:58: characters 13-45
			$callback(new \Array_hx());
		}
	}

	/**
	 * @param string $cartId
	 * @param int $idx
	 * @param \Closure $callback
	 * 
	 * @return void
	 */
	public function FindByCartIdAndIdx ($cartId, $idx, $callback) {
		#/src/shoppingcart/ItemRepository.hx:63: lines 63-68
		if (array_key_exists($cartId, $this->items->data)) {
			#/src/shoppingcart/ItemRepository.hx:64: lines 64-67
			if (($this->items->data[$cartId] ?? null)->length > $idx) {
				#/src/shoppingcart/ItemRepository.hx:65: characters 17-45
				$callback((($this->items->data[$cartId] ?? null)->arr[$idx] ?? null));
				#/src/shoppingcart/ItemRepository.hx:66: characters 17-23
				return;
			}
		}
		#/src/shoppingcart/ItemRepository.hx:69: characters 9-23
		$callback(null);
	}

	/**
	 * @param string $cartId
	 * @param int $idx
	 * @param \Closure $callback
	 * 
	 * @return void
	 */
	public function Remove ($cartId, $idx, $callback) {
		#/src/shoppingcart/ItemRepository.hx:50: characters 9-39
		($this->items->data[$cartId] ?? null)->offsetSet($idx, null);
		#/src/shoppingcart/ItemRepository.hx:51: characters 9-19
		$callback();
	}
}

Boot::registerClass(ItemRepository::class, 'shoppingcart.ItemRepository');
