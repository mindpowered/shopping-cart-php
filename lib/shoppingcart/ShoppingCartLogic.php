<?php
/**
 * Generated by Haxe 4.1.1
 */

namespace shoppingcart;

use \php\_Boot\HxAnon;
use \php\Boot;

class ShoppingCartLogic {
	/**
	 * @var CartRepository
	 */
	public $cartRepo;
	/**
	 * @var ItemRepository
	 */
	public $itemRepo;

	/**
	 * @param CartRepository $cartRepo
	 * @param ItemRepository $itemRepo
	 * 
	 * @return void
	 */
	public function __construct ($cartRepo, $itemRepo) {
		#/src/shoppingcart/ShoppingCartLogic.hx:7: characters 9-33
		$this->cartRepo = $cartRepo;
		#/src/shoppingcart/ShoppingCartLogic.hx:8: characters 9-33
		$this->itemRepo = $itemRepo;
	}

	/**
	 * @param string $cartId
	 * @param string $itemId
	 * @param int $qty
	 * @param float $price
	 * @param \Closure $callback
	 * 
	 * @return void
	 */
	public function AddItem ($cartId, $itemId, $qty, $price, $callback) {
		#/src/shoppingcart/ShoppingCartLogic.hx:19: characters 9-46
		$item = new ItemModel();
		#/src/shoppingcart/ShoppingCartLogic.hx:20: characters 9-29
		$item->cartId = $cartId;
		#/src/shoppingcart/ShoppingCartLogic.hx:21: characters 9-29
		$item->itemId = $itemId;
		#/src/shoppingcart/ShoppingCartLogic.hx:22: characters 9-23
		$item->qty = $qty;
		#/src/shoppingcart/ShoppingCartLogic.hx:23: characters 9-27
		$item->price = $price;
		#/src/shoppingcart/ShoppingCartLogic.hx:24: lines 24-26
		$this->itemRepo->Add($item, function ($idx) use (&$callback) {
			#/src/shoppingcart/ShoppingCartLogic.hx:25: characters 13-26
			$callback($idx);
		});
	}

	/**
	 * @param string $cartId
	 * @param \Closure $callback
	 * 
	 * @return void
	 */
	public function Clear ($cartId, $callback) {
		#/src/shoppingcart/ShoppingCartLogic.hx:80: lines 80-82
		$this->cartRepo->Remove($cartId, function () use (&$callback) {
			#/src/shoppingcart/ShoppingCartLogic.hx:81: characters 13-23
			$callback();
		});
	}

	/**
	 * @param string $cartId
	 * @param \Closure $callback
	 * 
	 * @return void
	 */
	public function CountItems ($cartId, $callback) {
		#/src/shoppingcart/ShoppingCartLogic.hx:57: lines 57-60
		$this->itemRepo->FindByCartId($cartId, function ($items) use (&$callback) {
			#/src/shoppingcart/ShoppingCartLogic.hx:58: characters 13-42
			$count = $items->length;
			#/src/shoppingcart/ShoppingCartLogic.hx:59: characters 13-28
			$callback($count);
		});
	}

	/**
	 * @param string $storeId
	 * @param \Closure $callback
	 * 
	 * @return void
	 */
	public function Create ($storeId, $callback) {
		#/src/shoppingcart/ShoppingCartLogic.hx:12: characters 9-46
		$cart = new CartModel();
		#/src/shoppingcart/ShoppingCartLogic.hx:13: characters 9-31
		$cart->storeId = $storeId;
		#/src/shoppingcart/ShoppingCartLogic.hx:14: lines 14-16
		$this->cartRepo->Add($cart, function ($cartId) use (&$callback) {
			#/src/shoppingcart/ShoppingCartLogic.hx:15: characters 13-29
			$callback($cartId);
		});
	}

	/**
	 * @param string $cartId
	 * @param \Closure $callback
	 * 
	 * @return void
	 */
	public function GetCartSummary ($cartId, $callback) {
		#/src/shoppingcart/ShoppingCartLogic.hx:63: lines 63-77
		$this->itemRepo->FindByCartId($cartId, function ($items) use (&$callback) {
			#/src/shoppingcart/ShoppingCartLogic.hx:64: characters 13-33
			$total = 0;
			#/src/shoppingcart/ShoppingCartLogic.hx:65: characters 13-31
			$count = 0;
			#/src/shoppingcart/ShoppingCartLogic.hx:66: lines 66-71
			$_g = 0;
			while ($_g < $items->length) {
				#/src/shoppingcart/ShoppingCartLogic.hx:66: characters 17-21
				$item = ($items->arr[$_g] ?? null);
				#/src/shoppingcart/ShoppingCartLogic.hx:66: lines 66-71
				++$_g;
				#/src/shoppingcart/ShoppingCartLogic.hx:67: lines 67-70
				if ($item !== null) {
					#/src/shoppingcart/ShoppingCartLogic.hx:68: characters 21-51
					$total += $item->qty * $item->price;
					#/src/shoppingcart/ShoppingCartLogic.hx:69: characters 21-38
					$count += $item->qty;
				}
			}
			#/src/shoppingcart/ShoppingCartLogic.hx:72: lines 72-75
			$summary = new HxAnon([
				"total" => $total,
				"items" => $count,
			]);
			#/src/shoppingcart/ShoppingCartLogic.hx:76: characters 13-30
			$callback($summary);
		});
	}

	/**
	 * @param string $cartId
	 * @param \Closure $callback
	 * 
	 * @return void
	 */
	public function ListItems ($cartId, $callback) {
		#/src/shoppingcart/ShoppingCartLogic.hx:29: lines 29-41
		$this->itemRepo->FindByCartId($cartId, function ($items) use (&$callback) {
			#/src/shoppingcart/ShoppingCartLogic.hx:30: characters 13-62
			$list = new \Array_hx();
			#/src/shoppingcart/ShoppingCartLogic.hx:31: lines 31-39
			$_g = 0;
			while ($_g < $items->length) {
				#/src/shoppingcart/ShoppingCartLogic.hx:31: characters 17-21
				$item = ($items->arr[$_g] ?? null);
				#/src/shoppingcart/ShoppingCartLogic.hx:31: lines 31-39
				++$_g;
				#/src/shoppingcart/ShoppingCartLogic.hx:32: lines 32-37
				$cartItem = new HxAnon([
					"idx" => $item->idx,
					"itemId" => $item->itemId,
					"qty" => $item->qty,
					"price" => $item->price,
				]);
				#/src/shoppingcart/ShoppingCartLogic.hx:38: characters 17-36
				$list->arr[$list->length++] = $cartItem;
			}
			#/src/shoppingcart/ShoppingCartLogic.hx:40: characters 13-27
			$callback($list);
		});
	}

	/**
	 * @param string $cartId
	 * @param int $idx
	 * @param \Closure $callback
	 * 
	 * @return void
	 */
	public function RemoveItem ($cartId, $idx, $callback) {
		#/src/shoppingcart/ShoppingCartLogic.hx:44: lines 44-46
		$this->itemRepo->Remove($cartId, $idx, function () use (&$callback) {
			#/src/shoppingcart/ShoppingCartLogic.hx:45: characters 13-23
			$callback();
		});
	}

	/**
	 * @param string $cartId
	 * @param int $idx
	 * @param int $qty
	 * @param \Closure $callback
	 * 
	 * @return void
	 */
	public function UpdateQty ($cartId, $idx, $qty, $callback) {
		#/src/shoppingcart/ShoppingCartLogic.hx:48: lines 48-55
		$_gthis = $this;
		#/src/shoppingcart/ShoppingCartLogic.hx:49: lines 49-54
		$this->itemRepo->FindByCartIdAndIdx($cartId, $idx, function ($item) use (&$_gthis, &$callback, &$qty) {
			#/src/shoppingcart/ShoppingCartLogic.hx:50: characters 13-27
			$item->qty = $qty;
			#/src/shoppingcart/ShoppingCartLogic.hx:51: lines 51-53
			$_gthis->itemRepo->Edit($item, function () use (&$callback) {
				#/src/shoppingcart/ShoppingCartLogic.hx:52: characters 17-27
				$callback();
			});
		});
	}
}

Boot::registerClass(ShoppingCartLogic::class, 'shoppingcart.ShoppingCartLogic');
